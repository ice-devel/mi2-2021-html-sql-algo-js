Exo 1 :
Créer une fonction qui ajoute deux nombres passés en paramètres,
et qui retourne le résultat de cette addition.

Utiliser cette fonction dans un algo, et y afficher le résultat.

Variables
    somme: entier
Debut fonction addition(nombre1:entier, nombre2:entier) // signature
    // corps
    somme = nombre1 + nombre2
    retourner somme
Fin fonction

Variables
    nb1: entier
    nb2: entier
    resultat: entier
Debut algo
    nb1 = saisir "Entrez un nombre"
    nb2 = saisir "Entre un autre nombre"
    resultat = addition(nb1, nb2)
    afifcher resultat
Fin algo

Exo 2 :
Créer une fonction qui prend en paramètre un âge, et retourne si oui
ou non cet âge est celui d'une personne majeure : VRAI ou FAUX

Utilisez cette fonction dans un algo en demandant à l'utilisateur son âge.
Et affichez, si l'utilisateur est majeur ou mineur.

variableBooleenne = vrai
SI variableBooleenne == vrai
FIN SI

Variables
    estMajeur: booléen
Debut fonction majeur(age:entier)
    SI age >= 18
        estMajeur = vrai
    SINON
        estMajeur = faux
    FIN SI

    retourner estMajeur
Fin fonction

Variables
    ageUser: entier
    isMajeur: booléen
Debut algo
    ageUser = saisir "Quel est votre âge ?"
    // on appelle la fonction définie au dessus :
    isMajeur = majeur(ageUser)

    SI isMajeur == vrai
        afficher "Vous êtes majeur"
    SINON
        afficher "Vous êtes mineur"
    FIN SI


    isMajeur = majeur(13)
Fin algo

Exo 3
Créer une fonction qui prend en paramètre une annee de naissance,
un mois de naissance, et un jour de naissance
et qui retourne l'âge correspondant à cette date

Utilisez cette fonction dans un algo, en demandant à l'utilisateur
les trois informations nécessaires

Variables
    anneeActuelle: entier
    moisActuel: entier
    jourActuel: entier
    age: entier
Debut fonction agePersonne(jourNaissance:entier, moisNaissance: entier, anneeNaissance:entier)
    anneeActuelle = year()
    moisActuel = month()
    jourActuel = day()

    age = anneeActuelle - anneeNaissance
    SI moisActuel < moisNaissance OU moisActuel == moisNaissance ET jourActuel < jourNaissance
        age = age - 1
    FIN SI

    retourner age
Fin fonction

Variables
    yearUser: entier
    monthUser: entier
    dayUser: entier
    age: entier
Debut algo
    yearUser = lire "Quelle est votre année de naissance ?"
    monthUser = lire "Quel est votre mois de naissance ?"
    dayUser = lire "Quel est votre jour de naissance ?"

    age = agePersonne(dayUser, monthUser, yearUser)
    afficher age
Fin algo


Exo 4
Créer une fonction qui prend un tableau en paramètre
et qui retourne la valeur la plus petite qui s'y trouve

Variables
    i: entier
    min: entier
Debut fonction minimum(tab:tableau)
    min = tab[0]
    POUR i de 0 de LONGUEUR(tab)-1 par pas de 1
        SI tab[i] < min
            min = tab[i]
        FIN SI
    FIN POUR

    retourner min
Fin fonction

Utilisez cette fonction dans un algo
Variables
    mini: entier
    tab: tableau
    tab2: tableau
Debut algo
    ajouter 10 dans tab
    ajouter 11 dans tab
    ajouter 15 dans tab

    mini = minimum(tab)
    afficher mini


    ajouter 22 dans tab2
    ajouter 11 dans tab2
    ajouter 3 dans tab2

    mini = minimum(tab2)
    afficher mini
fin algo

Exo 5 :
Créer une fonction qui prend en paramètre un nombre
et qui retourne le carré de ce nombre.
Ensuite écrivez un algo qui utilise cette fonction.

Variables
    carre: entier
Debut fonction carre(nombre:entier)
    carre = nombre * nombre
    retourner carre
Fin fonction

Variables
    nombre: entier
Debut algo
    nombre = lire "entrez un nombre"
    afficher carre(nombre)
Fin algo

Exo 6 :
Créer une fonction qui prend un tableau en paramètre
et retourne un nouveau tableau dont les éléments sont les éléments du tableau
en paramètre, mais inversés.
Exemple : le tableau en paramètre : [1, 4, 5]
Vous devez retourner le tableau [5, 4, 1]
Ecrivez un algo qui construit un tableau et utilise cette fonction.

Variables
    ts: tableau
Debut fonction inverser(tab:tableau)
    POUR i allant de LONGUEUR(tab)-1 à 0 par pas de -1
        ajouter tab[0] dans ts
    FIN POUR

    retourner ts
Fin fonction

Variables
    listeNotes: tableau
    tabInverse: tableau
Debut algo
    ajouter 10 dans listeNotes
    ajouter 18 dans listeNotes
    // listeNotes contient 10, 18

    // on stocke dans la variable tabInverse le tableau que nous renvoie la fct inverser
    tabInverse = inverser(listeNotes)
Fin algo


Exo 7 :
Créer une fonction qui dit si oui ou non une chaine passée en paramètre est un palindrome.

kayak : kayak -> palindrome
salut : tulas -> pas palindrome

Vous pouvez récupérer les lettres d'une chaine une par une avec des indices,
comme si c'était un tableau

mot = "salut"
mot[0] -> "s"   mot[1] -> "a" mot[4] -> "t"

Utilisez cette fonction dans un algo.

1 - créer un mot dans l'autre sens, puis de vérifiez si les deux mots sont équivalents
2 - comparer les lettres opposées : la première avec la dernière, etc.

mot1 = "salut"
mot2 = "tulas"

s   0       t   4
a   1       u   3
l   2       l   2
u   3       a   1
t   4       s   0

Variables
    motInverse: chaine
    palindrome: booleen
Debut fonction isPalindrome(mot: chaine)
    motInverse = ""
    POUR i de LONGUEUR(mot)-1 à 0 par pas de -1
        motInverse = motInverse CONCAT mot[i]
    FIN POUR

    SI mot == motInverse
        palindrome = vrai
    SINON
        palindrome = faux
    FIN SI

    retourner palindrome
FIN FONCTION

salut : 5 lettres : 2 itérations : (5 - 1) / 2
s   t   0   4   LONGUEUR(mot)-1-0
a   u   1   3   LONGUEUR(mot)-1-1
l   l   2   2   LONGUEUR(mot)-1-2
u   a   3   1   LONGUEUR(mot)-1-3
t   s   4   0   LONGUEUR(mot)-1-4

test 4 lettres : 2 itérations
t t
e s
s e
t t

coucou 6 lettres : 3 itérations
c   u
o   o
u   c
c   u
o   o
u   c

Variables
    palindrome: booleen
Debut fonction isPalindrome(mot: chaine)
    palindrome = vrai
    POUR i de 0 à ARRONDIR_INFERIEUR(LONGUEUR(mot) / 2) par pas de 1
        SI mot[i] != mot[LONGUEUR(mot)-1-i]
            palindrome = faux
        FIN SI
    FIN POUR

    i = 0
    palindrome = vrai
    TANT QUE palindrome == vrai ET ARRONDIR_INFERIEUR(LONGUEUR(mot) / 2)
        SI mot[i] != mot[LONGUEUR(mot)-1-i]
            palindrome = faux
        FIN SI

        i = i + 1
    FIN TANT QUE

    retourner palindrome
Fin fonction

